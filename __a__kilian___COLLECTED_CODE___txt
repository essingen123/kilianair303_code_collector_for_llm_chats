# This is a collection of all the files that should be relevant for the project...

# __SHOULD_HAVE_NO_HASH_AND_BE_INCLUDEDt.py


# kigit.txt

# This is a config file for the auto_git_unicorn_moose_feather .. 🦄
# File: kigit.txt

# 💻 Update(💡)
set303a=y

# 💬 Verbose, output for each terminal run, y for yes and n for no
set303i=y

# 📝 git-reponame (empty for current folder name, 'random' for a random name)
set303b=kilianair303_code_collector_for_llm_chats

# 🔒 public git, y for yes n for no, standard no
set303c=n

# 📄 auto generate HTML page, y for yes and n for no
set303d=y

# 🗑️ tags, separated by commas
set303e=

# 📝 description
set303f=

# 🌐 website URL
set303g=

# 🎉 GithubPartywebpageLink
set303h=index.html

# 🌳 Branch to commit to, 'main' or a new branch name
set303j=master

# 💬 Default commit message (use ~date and ~data for auto-generated content)
set303k=Automated ~date ~data

# 🔧 Change ownership of all files to current user
set303l=y

# DONT EDIT OUT THIS LAST LINE

# alias_script.sh


# kilianair303_code_collector_for_llm_chats.sh

#!/bin/bash

# Constants
SKIP_GIT_FOLDER=true
IGNORE_GITIGNORE=true
INCLUDE_FILE="__a__kilian___INCLUDE_FILE_LIST.txt"
COLLECTED_CODE_FILE="__a__kilian___COLLECTED_CODE___${file_type:-txt}"
# Functions
create_files_to_include_file() {
  [[ ! -f "$INCLUDE_FILE" ]] && {
    > "$INCLUDE_FILE"
    find . -type f -o -type d | grep -v '/\.git/' | while read file; do
      [[ $(grep -q "^${file##*/}$" .gitignore) || ${file##*/} == "."* || ${file##*/} =~ \.(wav|pdf|jpg|gif|mp3|ogg|wmv|API_KEY|PASSWORD)$ ]] || echo "${file##*/}" >> "$INCLUDE_FILE"
    done
  }
}

get_files_list() {
  local files_list=()
  case $1 in
    python) files_list+=($(find . -type f -name "*.py" -print));;
    sh) files_list+=($(find . -type f -name "*.sh" -print));;
    *) files_list+=($(find . -type f -not -name "*.gif" -not -name "*.jpg" -not -name "*.pdf" -not -name "*.wav" -not -name "*.mp3" -not -name "*.ogg" -not -name "*.wmv" -print));;
  esac
  find . -type d | grep -v '\.git/' | while read dir; do
    case $1 in
      python) files_list+=($(find "$dir" -type f -name "*.py" -print));;
      sh) files_list+=($(find "$dir" -type f -name "*.sh" -print));;
      *) files_list+=($(find "$dir" -type f -not -name "*.gif" -not -name "*.jpg" -not -name "*.pdf" -not -name "*.wav" -not -name "*.mp3" -not -name "*.ogg" -not -name "*.wmv" -print));;
    esac
  done
  echo "${files_list[@]}"
}

update_files_to_include_file() {
  # code to update the include file
  # for example, you could update the timestamp of the file
  touch "$INCLUDE_FILE"
}

create_collected_code_file() {
  rm -f "$COLLECTED_CODE_FILE"
  echo "# This is a collection of all the files that should be relevant for the project..." >> "$COLLECTED_CODE_FILE"
  grep -v '^#' "$INCLUDE_FILE" | while read file; do
    echo -e "\n# $(realpath --relative-to=. "$file")\n" >> "$COLLECTED_CODE_FILE"
    cat "$file" >> "$COLLECTED_CODE_FILE"
  done
}

create_alias() {
  if ! alias fox_alias &> /dev/null; then
    wget https://raw.githubusercontent.com/essingen123/bashrc_alias_fox/master/alias_script.sh -O alias_script.sh && chmod +x alias_script.sh && ./alias_script.sh
    if ! alias sc &> /dev/null; then
      fox_alias sc 'kilianair303_collector sh'
      fox_alias pc 'kilianair303_collector python'
      fox_alias fc2 'kilianair303_collector'
    fi
  fi
}

kilianair303_collector() {
  local file_type=$1
  local files_list=($(get_files_list "$file_type"))
  if [[ ! -f "$INCLUDE_FILE" ]]; then
    create_files_to_include_file
    update_files_to_include_file
    echo "File list created. Press Enter to continue..."
    read -p ""
    exit
  else
    update_files_to_include_file
    create_collected_code_file
    create_alias
  fi
}

kilianair303_collector "$@"
# README.md

# kilianair303 Code Collector for LLM Chats

This repository contains a code collector script that helps organize and collect code files for the LLM chat project.

## Features

* Collects code files from the current directory and subdirectories
* Excludes files based on a customizable list
* Generates a single file with all the collected code
* Optional: auto-generates an HTML page with the collected code

## Installation

To install the code collector, simply run the `install_kilianair303_code_collector.sh` script in the same directory as this README file.

## Configuration

You can customize the code collector by modifying the `kilianair303_code_collector_for_llm_chats.sh` file.

## License

This repository is licensed under the MIT License.

## Contributing

Contributions are welcome! If you have any suggestions or improvements, please open an issue or submit a pull request.

## Author

kilianair303
# __a__kilian___INCLUDE_FILE_LIST.txt

__SHOULD_HAVE_NO_HASH_AND_BE_INCLUDEDt.py
kigit.txt
alias_script.sh
kilianair303_code_collector_for_llm_chats.sh
README.md
__a__kilian___INCLUDE_FILE_LIST.txt
__OLD_install_kilianair303_code_collector.sh

# __OLD_install_kilianair303_code_collector.sh

#!/bin/bash


# Function to check if the script is already installed in .bashrc
check_installed() {
    if grep -q "kilianair303_code_collector" ~/.bashrc; then
        echo "It looks like kilianair303_code_collector is already installed in your .bashrc file."
        echo "If you want to reinstall, please remove the previous installation first."
        exit 1
    fi
}

# Function to check if .bashrc file exists
check_bashrc() {
    if [ ! -f ~/.bashrc ]; then
        echo "It looks like you don't have a .bashrc file in your home directory."
        echo "This script will create one for you, but please be aware that this might"
        echo "overwrite any existing configuration you have."
        read -p "Are you sure you want to continue? (y/n) " -n 1 -r
        echo
        if [ "$REPLY" != "y" ]; then
            exit 1
        fi
    fi
}

# Function to append the code to the .bashrc file
append_to_bashrc() {
    echo "Appending kilianair303_code_collector to your .bashrc file..."
    cat kilianair303_code_collector_for_llm_chats.sh >> ~/.bashrc
    echo "Done! Please restart your terminal or run 'source ~/.bashrc' to apply the changes."
}

# Function to print a warning message
print_warning() {
    echo "WARNING: This script will collect all files in your current directory and subdirectories."
    echo "Please make sure you have reviewed the code and understand what it does before running it."
}

# Main script execution
check_installed
check_bashrc
append_to_bashrc
print_warning
